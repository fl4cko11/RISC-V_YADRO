 gcc -fdump-tree-all comp_check_bubble_sort.c создаёт промежуточные файлы:

*.original: Исходное представление кода, как он был написан в C.
*.gimple: Промежуточное представление на языке GIMPLE, упрощенном представлении, удобном для анализа и оптимизации.
*.cfg: Граф управления потоком (Control Flow Graph), показывающий, как выполняются различные блоки кода.
*.omplower: Преобразования, связанные с обработкой OpenMP (для параллельных вычислений).
*.lower: Преобразования для упрощения структуры программы и перевода в более низкие уровни представления.
*.eh: Информация о обработке исключений.
*.fixup_cfg*: Исправления графа управления потоком, показывающие изменения в его структуре.
*.local-fnsummary*: Сводки функций, показывающие, как функции взаимодействуют между собой.
*.profile_estimate: Оценка профилирования, используемая для анализа производительности кода.
*.release_ssa: Данные о версии SSA (Static Single Assignment), которая используется для оптимизаций.
*.isel: Информация о выборе инструкций для генерации кода.
*.optimized: Оптимизированное представление кода после применения различных оптимизаций.
*.warn-printf: Предупреждения, связанные с функциями printf, например, о возможных проблемах с форматированием.
*.statistics: Статистическая информация о процессе компиляции и оптимизации.
*.earlydebug и *.debug: Информация для отладки, которая может помочь в анализе и отладке кода на различных этапах компиляции.
*.adjust_alignment: Данные о выравнивании данных в памяти.
*.veclower: Преобразования, связанные с векторизацией, оптимизацией кода для использования SIMD-инструкций.


При включении агрессивной оптимизации gcc -O3 -fdump-tree-all comp_check_bubble_sort.c :

*.mergephi*: Объединение выражений с функцией phi, используемой в SSA для контроля потока.
*.vrp*: Анализ значений диапазона (Value Range Propagation) - оценка диапазонов значений переменных.
*.dce*: Удаление мертвого кода (Dead Code Elimination) - удаляет код, который никогда не будет выполнен.
*.cselim: Упрощение выборки (Conditional Select Elimination) - оптимизация условных операторов.
*.loop*: Оптимизации для работы с циклами, например, развертывание (unrolling) и устранение ненужных итераций.
*.sra: Упрощение массивов (Scalar Replacement of Aggregates) - замена агрегатов скалярными переменными.
*.tailr*: Оптимизация для хвостовых рекурсий, которая уменьшает количество вызовов функций.
*.vec*: Оптимизация векторизации, позволяющая использовать SIMD-инструкции для повышения производительности.
*.isl: Выбор инструкций (Instruction Selection) - преобразование промежуточного представления в машинный код.
*.cplxlower: Оптимизации для сложных выражений.
*.copyprop*: Пропаганда копирования (Copy Propagation) - замена переменных на их значения.
*.fre*: Оптимизации, связанные с удалением ненужных операций (Value Forwarding).
*.statistics: Статистические данные о процессе компиляции.
*.debug: Информация для отладки, которая может помочь в анализе кода.

Основные оптимизации, например в файле a-comp_check_bubble_sort.c.244t.optimized:
Преобразование типов:
В int_comparator тип _Bool используется для хранения результата сравнения, который затем преобразуется в int. Это позволяет компилятору оптимизировать работу с булевыми значениями.

Арифметика указателей:
В int_swap компилятор использует арифметику указателей для доступа к элементам массива. Индексы умножаются на размер типа (4 байта для int), что улучшает производительность по сравнению с вычислением адреса через умножение в каждом обращении.

Удаление базовых блоков:
В функции bubble_sort компилятор удалил некоторые базовые блоки, что свидетельствует о том, что определённые части кода были признаны ненужными, например, избыточные проверки.

Оптимизация циклов:
Использование конструкций PHI для управления состоянием переменных в циклах показывает, что компилятор оптимизировал управление потоком выполнения, чтобы уменьшить накладные расходы на проверки условий.

Инлайн-функции:
Внутренние функции, такие как int_comparator, могут быть инлайнены компилятором, что уменьшает накладные расходы на вызовы функций и увеличивает производительность.

Уменьшение количества операций:
В коде bubble_sort компилятор пытается минимизировать количество операций, объединив несколько условий и упростив логику циклов.

Удаление неиспользуемых переменных:
Некоторые временные переменные могут быть удалены компилятором, если они не влияют на конечный результат, что позволяет уменьшить потребление памяти и увеличить скорость выполнения.